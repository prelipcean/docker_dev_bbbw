### Linux embedded development image for beaglebone-black-wireless ###

## SETTINGS ##

# Ubuntu base image version
ARG UBUNTU_VERSION_TAG=focal-20241011

# Root password
ARG PASSWORD="temppwd"

# wget arguments
ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll"

# Target Architecture
ARG TARGETARCH=amd64

# VS Code Server version
ARG VS_CODE_SERVER_VERSION=4.93.1
ARG VS_CODE_SERVER_PORT=8800
ARG VS_CODE_EXT_CPPTOOLS_VERSION=1.22.10
ARG VS_CODE_EXT_HEX_EDITOR_VERSION=1.11.1
ARG VS_CODE_EXT_CMAKETOOLS_VERSION=1.19.52

## BASE IMAGE ##
FROM ubuntu:${UBUNTU_VERSION_TAG}

# Redeclare arguments after FROM
ARG PASSWORD
ARG WGET_ARGS
ARG TARGETARCH
ARG VS_CODE_SERVER_VERSION
ARG VS_CODE_SERVER_PORT
ARG VS_CODE_EXT_CPPTOOLS_VERSION
ARG VS_CODE_EXT_HEX_EDITOR_VERSION
ARG VS_CODE_EXT_CMAKETOOLS_VERSION

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Check if the target architecture is either x86_64 (amd64) or arm64 (aarch64)
RUN valid_archs="amd64 arm64"; \
    if [[ " $valid_archs " == *" $TARGETARCH "* ]]; then \
        echo "Architecture $TARGETARCH is supported."; \
    else \
        echo "Error: Unsupported architecture: $TARGETARCH. Valid architectures are: $valid_archs"; \
        exit 1; \
    fi

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Install linux development packages
RUN apt-get -y update && \
    apt-get install --no-install-recommends -y \
        bc \
        bison \
        build-essential \
        ca-certificates \
        chrpath \
        cmake \
        curl \
        device-tree-compiler \
        dfu-util \
        dos2unix \
        efitools \
        file \
        flex \
        gdisk \
        git \
        graphviz \
        imagemagick \
        libelf-dev \
        libgnutls28-dev \
        libguestfs-tools \
        liblz4-tool \
        libmpc-dev \
        libncurses-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libpython3-dev \
        libsdl2-dev \
        libssl-dev \
        locales \
        lz4 \
        lzma \
        lzma-alone \
        lzop \
        mc \
        minicom \
        net-tools \
        openssl \
        openssh-server \
        pkg-config \
        python3 \
        python3-coverage \
        python3-pip \
        python3-pkg-resources \
        python3-pycryptodome \
        python3-pyelftools \
        python3-pytest \
        python3-sphinx-rtd-theme \
        python3-sphinxcontrib.apidoc \
        python3-virtualenv \
        swig \
        tmux \
        tree \
        u-boot-tools \
        unzip \
        vim \
        wget \
        xz-utils \
        zstd
        
# Set root password
RUN echo "root:${PASSWORD}" | chpasswd

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y libssl-dev && \
    dpkg -l | grep libssl-dev
    
RUN apt-get update && apt-get install -y pkg-config && \
    pkg-config --cflags libcrypto && \
    pkg-config --libs libcrypto && \
    pkg-config --cflags openssl && \
    pkg-config --libs openssl

# Set up directories
RUN mkdir -p /workspace/ && \
    mkdir -p /opt/toolchains

# Set up sshd working directory
RUN mkdir -p /var/run/sshd && \
    chmod 0755 /var/run/sshd

# Allow root login via SSH
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# Expose SSH port
EXPOSE 22


#-------------------------------------------------------------------------------
# Initialize system locale (required by menuconfig)
#-------------------------------------------------------------------------------
RUN sed -i '/^#.*en_US.UTF-8/s/^#//' /etc/locale.gen && \
    locale-gen en_US.UTF-8 && \
    update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

#-------------------------------------------------------------------------------
# Use the "dark" theme for Midnight Commander
#-------------------------------------------------------------------------------
ENV MC_SKIN=dark

#-------------------------------------------------------------------------------
# Linaro cross tool-chain
#-------------------------------------------------------------------------------
RUN cd /tmp && \
    wget ${WGET_ARGS} https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz && \
    if [ $? -ne 0 ]; then \
        echo "Error: Failed to download Linaro toolchain." && exit 1; \
    fi && \
    mkdir -p /opt/toolchains && \
    tar -xJf gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz -C /opt/toolchains && \
    if [ $? -ne 0 ]; then \
        echo "Error: Failed to extract Linaro toolchain." && exit 1; \
    fi && \
    echo 'export PATH=$PATH:/opt/toolchains/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin' > /etc/profile.d/linaro-toolchain.sh && \
    chmod +x /etc/profile.d/linaro-toolchain.sh

#-------------------------------------------------------------------------------
# VS Code Server
#-------------------------------------------------------------------------------
# Set VS Code Server environment variables
ENV VS_CODE_SERVER_VERSION=${VS_CODE_SERVER_VERSION}
ENV VS_CODE_SERVER_PORT=${VS_CODE_SERVER_PORT}

# Install VS Code Server
RUN cd /tmp && \
    wget ${WGET_ARGS} https://code-server.dev/install.sh && \
    chmod +x install.sh && \
    bash install.sh --version ${VS_CODE_SERVER_VERSION}

# Download VS Code extensions (code-server extension manager does not work well)
RUN cd /tmp && \
    if [ "$TARGETARCH" = "amd64" ]; then \
        wget ${WGET_ARGS} https://github.com/microsoft/vscode-cpptools/releases/download/v${VS_CODE_EXT_CPPTOOLS_VERSION}/cpptools-linux-x64.vsix -O cpptools.vsix; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
        wget ${WGET_ARGS} https://github.com/microsoft/vscode-cpptools/releases/download/v${VS_CODE_EXT_CPPTOOLS_VERSION}/cpptools-linux-arm64.vsix -O cpptools.vsix; \
    else \
        echo "Unsupported architecture"; \
        exit 1; \
    fi && \
    wget ${WGET_ARGS} https://github.com/microsoft/vscode-cmake-tools/releases/download/v${VS_CODE_EXT_CMAKETOOLS_VERSION}/cmake-tools.vsix -O cmake-tools.vsix && \
    wget --compression=gzip ${WGET_ARGS} https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-vscode/vsextensions/hexeditor/${VS_CODE_EXT_HEX_EDITOR_VERSION}/vspackage -O hexeditor.vsix

# Install extensions
RUN cd /tmp && \
    code-server --install-extension cpptools.vsix && \
    code-server --install-extension cmake-tools.vsix && \
    code-server --install-extension hexeditor.vsix

# Clean up
RUN cd /tmp && \
    rm install.sh && \
    rm cpptools.vsix && \
    rm cmake-tools.vsix && \
    rm hexeditor.vsix

# Copy workspace configuration
# TBD COPY scripts/tbd.code-workspace /tbd.code-workspace
COPY scripts/vs_code.code-workspace /vs_code.code-workspace


#-------------------------------------------------------------------------------
# TBD
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Entrypoint
#-------------------------------------------------------------------------------
# Create a script to source /etc/profile and start bash
#RUN echo '#!/bin/bash' > /entrypoint.sh && \
#    echo 'source /etc/profile' >> /entrypoint.sh && \
#    echo 'exec /bin/bash "$@"' >> /entrypoint.sh && \
#    chmod +x /entrypoint.sh

#ENTRYPOINT ["/entrypoint.sh"]

# Custom entrypoint
COPY scripts/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh && \
    dos2unix /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
